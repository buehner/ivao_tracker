{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to IVAO tracker","text":"<p>This project started as a playground to learn the Python language. The git repository has been generated with this template.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>You need poetry.</p>"},{"location":"#setup","title":"Setup","text":"<p>Install dependencies:</p> <pre><code>make install\n</code></pre> <p>Activate the virtual environment:</p> <pre><code>source $(poetry env info --path)/bin/activate\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Run the tests:</p> <pre><code>make test\n</code></pre> <p>Run the code:</p> <pre><code>python -m ivao_tracker\n</code></pre> <p>docker build -f Dockerfile -t ivao --progress=plain ..</p>"},{"location":"docker/","title":"Docker","text":"<p>Use this from the docker subdir to build the image manually.</p> <pre><code>docker build -f Dockerfile -t ivao --progress=plain ..\n</code></pre>"},{"location":"makefile/","title":"The Makefile","text":"<p>The Makefile can be used to perform common tasks.</p> <pre><code>Usage: make &lt;target&gt;\n\nTargets:\n\nhelp:             ## Show the help.\ninstall:          ## Install the project in dev mode.\nfmt:              ## Format code using black &amp; isort.\nlint:             ## Run pep8, black, mypy linters.\ntest: lint        ## Run tests and generate coverage report.\nwatch:            ## Run tests on every change.\nclean:            ## Clean unused files.\nvirtualenv:       ## Create a virtual environment.\nrelease:          ## Create a new tag for release.\ndocs:             ## Build the documentation.\nswitch-to-poetry: ## Switch to poetry package manager.\n</code></pre>"},{"location":"sql/","title":"SQL","text":"<p>Use this SQL to create a (simplified) line from the single point geoms of a pilots tracks:</p> <pre><code>SELECT ST_Simplify(ST_MakeLine(p.geometry ORDER BY p.id), 0.00003) AS line_geom\nFROM pilottrack p\nWHERE p.\"pilotSessionId\" = 123456789;\n-- WHERE p.\"pilotSessionId\" = (SELECT ps.id FROM pilotsession ps WHERE ps.callsign = 'ABCDE');\n</code></pre>"},{"location":"sql/#clustering","title":"Clustering","text":"<p>Variant 1:</p> <pre><code>SELECT\n  ST_Centroid(ST_Collect(geometry)) AS cluster_geom,\n  COUNT(*) AS num_points\nFROM (\n  SELECT geometry, ST_ClusterKMeans(geometry, 100) OVER () AS cluster_id\n  FROM pilottrack\n) AS clusters\nGROUP BY cluster_id order by num_points DESC;\n</code></pre> <p>Density based approach with bboxes:</p> <pre><code>SELECT kmean, count(*), ST_SetSRID(ST_Extent(geom), 4326) as bbox\nFROM\n(\n    SELECT ST_ClusterKMeans(geometry, 100) OVER() AS kmean, ST_Centroid(geometry) as geom\n    FROM pilottrack\n) tsub\nGROUP BY kmean;\n</code></pre> <p>Density based approach with centroids:</p> <pre><code>SELECT kmean, count(*), st_centroid(st_union(geom)) AS geom\nFROM\n(\n SELECT ST_ClusterKMeans(geometry, 100) OVER() AS kmean, ST_Centroid(geometry) as geom\n FROM pilottrack\n) tsub\nGROUP BY kmean;\n</code></pre>"}]}